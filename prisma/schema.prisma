generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trabajador {
  id                Int      @id @default(autoincrement())
  nombre           String
  sueldo           Float
  tipo             String
  metodoPago       String   @default("TRANSFERENCIA") // TRANSFERENCIA, EFECTIVO, CHEQUE
  numeroCuenta     String?  // Para transferencias
  banco            String?  // Para transferencias
  telefono         String?
  email            String?
  fechaContrato    DateTime @default(now())
  estado           String   @default("ACTIVO") // ACTIVO, INACTIVO
  nominas          Nomina[]
  pagosMensuales   PagoMensualEmpleado[]
}

model Nomina {
  id           Int      @id @default(autoincrement())
  trabajador   Trabajador @relation(fields: [trabajadorId], references: [id])
  trabajadorId Int
  cantidad     Float
  extra        Float
  is_user      String
  fecha        DateTime @default(now())
  pagos        Pagar[]
}

model Pagar {
  id          Int      @id @default(autoincrement())
  nomina      Nomina   @relation(fields: [nominaId], references: [id])
  nominaId    Int
  is_user     String
  monto       Float
  metodoPago  String   @default("TRANSFERENCIA") // TRANSFERENCIA, EFECTIVO, CHEQUE
  estado      String   @default("PENDIENTE") // PENDIENTE, COMPLETADO, FALLIDO
  referencia  String?  // Número de referencia del pago
  fecha       DateTime @default(now())
  fechaPago   DateTime?
}

// Nueva tabla para controlar pagos mensuales de empleados
model PagoMensualEmpleado {
  id           Int      @id @default(autoincrement())
  trabajadorId Int
  trabajador   Trabajador @relation(fields: [trabajadorId], references: [id])
  anio         Int      // Año del pago
  mes          Int      // Mes del pago (1-12)
  monto        Float    // Monto total pagado en el mes
  estado       String   @default("COMPLETADO") // COMPLETADO, PENDIENTE, FALLIDO
  fechaPago    DateTime @default(now())
  referencia   String?  // Número de referencia del pago
  is_user      String   // Usuario que realizó el pago
  
  @@unique([trabajadorId, anio, mes]) // Solo un pago por empleado por mes
}

// Nueva tabla para cuotas mensuales de residentes
model CuotaMensualResidente {
  id          Int      @id @default(autoincrement())
  userId      String   // ID del usuario residente (USER_CASUAL)
  userName    String   // Nombre del residente
  userEmail   String   // Email del residente
  anio        Int      // Año de la cuota
  mes         Int      // Mes de la cuota (1-12)
  monto       Float    @default(100.0) // Cuota base de $100
  montoMorosidad Float @default(0.0) // Recargo por morosidad
  montoTotal  Float    @default(100.0) // Monto total a pagar (cuota + morosidad)
  estado      String   @default("PENDIENTE") // PENDIENTE, PAGADO, VENCIDO, MOROSO
  fechaVencimiento DateTime // Fecha límite de pago
  fechaVencimientoGracia DateTime? // Fecha límite con período de gracia
  fechaPago   DateTime? // Fecha en que se realizó el pago
  diasMorosidad Int    @default(0) // Días de retraso en el pago
  porcentajeMorosidad Float @default(10.0) // Porcentaje de recargo por morosidad
  metodoPago  String?  // Método usado para el pago
  referencia  String?  // Número de referencia del pago
  stripeSessionId String? // ID de la sesión de Stripe
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, anio, mes]) // Solo una cuota por residente por mes
}
